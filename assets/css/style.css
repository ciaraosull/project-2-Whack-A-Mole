.backdrop {
  background: url("..//images/backdrop-image-resized.jpg");
  background-position: center bottom;
  background-repeat: no-repeat;
  background-size: cover;
  background-color: gray;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.header-info {
  background-color: yellow;
}

/* draft css to test to make moles in holes using :after for responsive square divs*/


.game-container {
  display: flex;
  width: 100%;
  justify-content: space-evenly;
  flex-wrap: wrap;
  top: 70%;
  margin-top: auto;
  flex-shrink: 0; /*to make game container sticky to bottom*/

}

.mole {
  position: absolute;
  /* Use absolute so its content will not affect the dimensions of the hole square*/
  width: 50%;
  height: 70%;
  background: url("../images/mole-image.png") center no-repeat;
  background-size: contain;
  /*Because position:absolute was used, then to center this pos left and neg margin left was used*/
  left: 45%;
  margin-left: -25%;
  bottom: 0;
  z-index: -2; /*reset stacking order so mole behind hole */
  transition: 2s;
  top: 35%; /*to move the mole div under the hole div and this will be reset with js to have the mole peek up*/

}

.hole {
  position: relative;
  width: 30%;
  z-index: 2; /*reset stacking order so hole on top of mole */
  overflow: hidden; /*hides moles*/
}

/* To make this div a perfect responsive square the :after pseudo-element was used.  
  By adding an empty :after element to .square and set padding-bottom: 100%:*/
.hole:after {
  content: "";
  display: block;
  padding-bottom: 90%;
  background: url("../images/hole-image.png") bottom center no-repeat;
  background-size: contain;
}



.hole.up .mole {
  top: 0;
}


@media (min-width: 400px) {
  .game-container {
    width: 80%;
  }
}

@media (min-width: 600px) {
  .game-container {
    width: 60%;
  }
}
